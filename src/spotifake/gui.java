package spotifake;

import Dao.Dao_autores;
import Dao.Dao_canciones;
import Dao.Dao_discos;
import Dao.Dao_generos;
import Dao.Dao_grupos;

import Pojos.Autor;
import Pojos.Cancion;
import Pojos.Disco;
import Pojos.Grupo;
import fmr.persistence.ConfigFiles;
import java.awt.Color;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import resources.icons.img; //import images for the gui

/**
 *
 * @author Fernando
 * @since V 0.1
 */
public class gui extends javax.swing.JFrame {
    public static int current_song_id = 1;
    
    public static List <Cancion> st_canciones;
    public static List <Grupo> st_grupos;
    public static List <Disco> st_discos;
    public static List <Autor> st_autores;
    public static List <String> st_generos;
    
    public static boolean showing_discos = false;
    public static boolean showing_songs = false;
    public static boolean showing_autores = false;
    
    private static final boolean debug = true;
    img im = new img();
    
    String track_list[]; //array de strings con las direcciones de las canciones
    List<String> urls = new ArrayList<>();
    
    public static Player ply;
    
    /**
     * 
     * Default constructor.
     */
    public gui() {
        
        initComponents();
        
        try {
            setIconImage(getToolkit().getImage(getClass().getResource("/resources/icons/play_s.png")));
            
            jButton1.setOpaque(false);
            jButton1.setContentAreaFilled(false);
            jButton1.setBorderPainted(false);
            jButton1.setIcon((ImageIcon) im.ini("stop_s.png"));

            jToggleButton1.setOpaque(false);
            jToggleButton1.setContentAreaFilled(false);
            jToggleButton1.setBorderPainted(false);
            jToggleButton1.setIcon((ImageIcon) im.ini("play_s.png"));
            
            jButton2.setOpaque(false);
            jButton2.setContentAreaFilled(false);
            jButton2.setBorderPainted(false);
            jButton2.setIcon((ImageIcon) im.ini("back_s.png"));
            
            jButton3.setOpaque(false);
            jButton3.setContentAreaFilled(false);
            jButton3.setBorderPainted(false);
            jButton3.setIcon((ImageIcon) im.ini("next_s.png"));
            
            jButton4.setOpaque(false);
            jButton4.setContentAreaFilled(false);
            jButton4.setBorderPainted(false);
            jButton4.setIcon((ImageIcon) im.ini("unmute.png"));
            
            gui.ply = new Player();
            
            //CREATE CONFIG FILES
            //-Language
            Properties newProperties = new Properties();
            newProperties.setProperty("lang", "ES");
            ConfigFiles cf = new ConfigFiles();
            cf.newFile("LANG", newProperties, "Language configuration.");
            Properties loadFile = cf.loadFile("LANG", debug);
            loadLang(loadFile.getProperty("lang"));
            jComboBox1.setSelectedIndex(0);
            
            //-GUI color
            newProperties.clear();
            newProperties.setProperty("color", "white");
            cf.newFile("color", newProperties, "GUI skin color.");
            Properties loadFile1 = cf.loadFile("color");
            String color = loadFile1.getProperty("color");
            setColor(color);
            
        } catch (Exception ex) {
            System.out.println("WARNING CAN'T LOAD RESOURCES");
            ex.printStackTrace();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel_album_img = new javax.swing.JLabel();
        jLabel_song_name = new javax.swing.JLabel();
        jLabel_song_duration = new javax.swing.JLabel();
        jLabel_song_album = new javax.swing.JLabel();
        jLabel_song_group = new javax.swing.JLabel();
        jLabel_next_song_name = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea_song_author = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jRadioButtonMenuItemES = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItemEN = new javax.swing.JRadioButtonMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SpotiFake");
        setMinimumSize(new java.awt.Dimension(569, 376));
        setResizable(false);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jButton1.setMaximumSize(new java.awt.Dimension(70, 70));
        jButton1.setMinimumSize(new java.awt.Dimension(70, 70));
        jButton1.setPreferredSize(new java.awt.Dimension(70, 70));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setMaximumSize(new java.awt.Dimension(70, 70));
        jButton2.setMinimumSize(new java.awt.Dimension(70, 70));
        jButton2.setPreferredSize(new java.awt.Dimension(70, 70));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setMaximumSize(new java.awt.Dimension(70, 70));
        jButton3.setMinimumSize(new java.awt.Dimension(70, 70));
        jButton3.setPreferredSize(new java.awt.Dimension(70, 70));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jToggleButton1.setMaximumSize(new java.awt.Dimension(70, 70));
        jToggleButton1.setMinimumSize(new java.awt.Dimension(70, 70));
        jToggleButton1.setPreferredSize(new java.awt.Dimension(70, 70));
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setHorizontalScrollBar(null);

        jPanel1.setPreferredSize(new java.awt.Dimension(837, 314));

        jLabel_album_img.setMaximumSize(new java.awt.Dimension(292, 292));
        jLabel_album_img.setMinimumSize(new java.awt.Dimension(292, 292));
        jLabel_album_img.setPreferredSize(new java.awt.Dimension(292, 292));
        jLabel_album_img.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_album_imgMouseClicked(evt);
            }
        });

        jLabel_song_name.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel_song_duration.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel_song_album.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel_song_album.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_song_albumMouseClicked(evt);
            }
        });

        jLabel_song_group.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel1.setText("Nombre:");

        jLabel2.setText("Duraci√≥n:");

        jLabel3.setText("Disco:");

        jLabel4.setText("Grupo:");

        jLabel5.setText("Autor/es:");

        jTextArea_song_author.setEditable(false);
        jTextArea_song_author.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea_song_author.setColumns(20);
        jTextArea_song_author.setLineWrap(true);
        jTextArea_song_author.setRows(5);
        jTextArea_song_author.setWrapStyleWord(true);
        jTextArea_song_author.setAutoscrolls(false);
        jScrollPane3.setViewportView(jTextArea_song_author);

        jLabel6.setText("Siguiente canci√≥n: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_album_img, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel_song_album, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel_song_duration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel_song_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_next_song_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 41, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel_song_group, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(204, 204, 204))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_song_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_song_duration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_song_album, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel_song_group, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_next_song_name, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel_album_img, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel1);

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Buscar...");
        jTextField1.setToolTipText("");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton4.setPreferredSize(new java.awt.Dimension(23, 23));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jMenu1.setText("Language");

        jRadioButtonMenuItemES.setSelected(true);
        jRadioButtonMenuItemES.setText("ES");
        jRadioButtonMenuItemES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemESActionPerformed(evt);
            }
        });
        jMenu1.add(jRadioButtonMenuItemES);

        jRadioButtonMenuItemEN.setText("EN");
        jRadioButtonMenuItemEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemENActionPerformed(evt);
            }
        });
        jMenu1.add(jRadioButtonMenuItemEN);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Color");

        jMenuItem2.setText("Light Blue");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("White");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Help");

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jComboBox1, 0, 190, Short.MAX_VALUE)
                    .addComponent(jTextField1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //FUNCTIONS INI ------------------------------------------------------------
    private static String jTFSearch, jLab1, jLab2, jLab3, jLab4, jLab5, jLab6;
    private static String[] combo;
    
    private void setColor(String color){
        if(!"".equals(color)){
            Color c = null;
            Properties prp = new Properties();
            switch(color){
                case "white":
                    c = new Color(240,240,240);
                    prp.setProperty("color", "white");
                    break;
                case "lightBlue":
                    c = new Color(170,200,255);
                    prp.setProperty("color", "lightBlue");
                    break;
                default:
                    c = new Color(240,240,240);
                    prp.setProperty("color", "white");
                    break;
            }
            this.getContentPane().setBackground(c);
            this.jPanel1.setBackground(c);
            gui.jTextArea_song_author.setBackground(c);
            gui.jTextField1.setBackground(c);
            gui.jTree1.setBackground(c);
            final DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer)(gui.jTree1.getCellRenderer());
            renderer.setBackgroundNonSelectionColor(c);
            //renderer.setBackgroundSelectionColor(Color.ORANGE);
            //renderer.setTextNonSelectionColor(Color.RED);
            //renderer.setTextSelectionColor(Color.BLUE);
            ConfigFiles cf = new ConfigFiles();
            cf.updateFile("color", prp, "GUI skin color.");
        }
    }
    
    /**
     * 
     * Load language from file.
     * @param lang Language
     */
    private static void loadLang(String lang){
        if(!"".equals(lang)){
            ConfigFiles cf = new ConfigFiles();
            Properties loadFile = cf.loadFile(lang, debug);
            switch(lang){
                case "ES":
                    jRadioButtonMenuItemES.setSelected(true);
                    jRadioButtonMenuItemEN.setSelected(false);
                    jMenu1.setText("Idioma");
                    jMenu2.setText("Ayuda");
                    jMenuItem2.setText("Azul Claro");
                    jMenuItem3.setText("Blanco");
                    jMenuItem1.setText("Acerca de SpotiFake");
                    break;
                case "EN":
                    jRadioButtonMenuItemES.setSelected(false);
                    jRadioButtonMenuItemEN.setSelected(true);
                    jMenu1.setText("Language");
                    jMenu2.setText("Help");
                    jMenuItem2.setText("LightBlue");
                    jMenuItem3.setText("White");
                    jMenuItem1.setText("About SpotiFake");
                    break;
                default:
                    jRadioButtonMenuItemES.setSelected(false);
                    jRadioButtonMenuItemEN.setSelected(true);
                    jMenu1.setText("Language");
                    jMenu2.setText("Help");
                    jMenuItem1.setText("About SpotiFake");
                    break;
            }
            
            jTFSearch = loadFile.getProperty("tBoxSearch");
            jLab1 = loadFile.getProperty("jLab1");
            jLab2 = loadFile.getProperty("jLab2");
            jLab3 = loadFile.getProperty("jLab3");
            jLab4 = loadFile.getProperty("jLab4");
            jLab5 = loadFile.getProperty("jLab5");
            jLab6 = loadFile.getProperty("jLab6");
            combo = loadFile.getProperty("combo").split(",");
            setLang();
        }
    }
    
    /**
     * 
     * Set language on the interface
     */
    private static void setLang(){
        jTextField1.setText(jTFSearch);
        jLabel1.setText(jLab1);
        jLabel2.setText(jLab2);
        jLabel3.setText(jLab3);
        jLabel4.setText(jLab4);
        jLabel5.setText(jLab5);
        jLabel6.setText(jLab6);
        jComboBox1.removeAllItems();
        for(int i = 0; i < combo.length; i++){
            jComboBox1.addItem(combo[i]);
        }
        
    }
    
    /**
     * 
     * Play the next song.
     */
    public static void set_next_song(){
        if(current_song_id != st_canciones.size()){
            try {
                ply.set_song_remote(st_canciones.get(current_song_id).getUrl());
                jLabel_song_name.setText(st_canciones.get(current_song_id).getNombre());
                
                jLabel_album_img.setIcon(new db().get_disco_img(st_canciones.get(current_song_id).getId_disco()));
                
                current_song_id = current_song_id+1;
                jTree1.setSelectionRow(current_song_id);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
            load_clicked_song();
        }
    }
    
    /**
     * 
     * @return The name of the next song
     */
    public static String get_next_song(){
        String str = "";
        if(current_song_id != st_canciones.size()){
            str = st_canciones.get(current_song_id).getNombre();
        }
        return(str);
    }
    
    /**
     * 
     * Play the selected song and call load_data().
     */
    public static void load_clicked_song(){
        try {
            String str = jTree1.getSelectionModel().getSelectionPath().toString(); //Devuelve "[Canciones, CANCION]"
            String s[] = str.split(","); //SPLIT, Nos quedamos con " CANCION]"
            String n = s[1].substring(1, s[1].length()-1); //Cogemos "CANCION"
            System.out.println("Clicked Song: " + n);
            
            int[] sel = jTree1.getSelectionModel().getSelectionRows();
            int sel_id = st_canciones.get(sel[0]-1).getId();
            current_song_id = jTree1.getSelectionRows()[0];
            
            //Play clicked song
            Cancion c = new db().get_cancion(sel_id);
            ply.set_song_remote(c.getUrl());
            load_data(c);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * 
     * Load the selected album and call load_clicked_song().
     */
    public static void load_clicked_album(){
        if(showing_songs == false){
            String str = jTree1.getSelectionModel().getSelectionPath().toString();
            String s[] = str.split(",");
            String n = s[1].substring(1, s[1].length()-1);
            System.out.println("Clicked Album: " + n);

            int[] sel = jTree1.getSelectionModel().getSelectionRows();
            int sel_id = st_discos.get(sel[0]-1).getId();

            new Dao_canciones(n,2).fill_song_names_by_album(sel_id);
            showing_songs = true;
        }else{
            load_clicked_song();
        }
    }
    
    /**
     * 
     * Loads the data of the song on the GUI.
     * @param c 
     */
    public static void load_data(Cancion c){
        jLabel_song_name.setText(c.getNombre());
        jLabel_song_album.setText(new db().get_disco_nombre(c.getId()));
        jLabel_song_group.setText(new db().get_grupo(c.getId_disco()));
        jTextArea_song_author.setText(new db().get_autores(c.getId()));
        jLabel_next_song_name.setText(get_next_song());
        jLabel_album_img.setIcon(new db().get_disco_img(c.getId_disco()));
    }
    
    /**
     * 
     * Load the songs of the clicked album.
     * Called when click on album image or album name.
     */
    public void load_songs_by_album(){
        Cancion c = st_canciones.get(current_song_id-1);
        int id_disco = c.getId_disco();
        String nombre = new db().get_disco_nombre(c.getId());
        System.out.println("Album click event: " + nombre);
        new Dao_canciones(nombre, 2).fill_song_names_by_album(id_disco);
    }
    
    /**
     * 
     * Clear the jTree.
     */
    public void clear_tree(){
        DefaultTreeModel modelo = null;
        jTree1.setModel(modelo);
    }
    //FUNCTIONS END ------------------------------------------------------------

    
    
    //EVENTS INI _______________________________________________________________
    //Play/Pause
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if(jToggleButton1.isSelected() == true)
        {
            jToggleButton1.setIcon((ImageIcon) im.ini("pause_s.png"));
            ply.play_song();
        }
        else
        {
            jToggleButton1.setIcon((ImageIcon) im.ini("play_s.png"));
            ply.pause_song();
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    //Previous song
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(current_song_id != 1){
            try {
                ply.set_song_remote(st_canciones.get(current_song_id-2).getUrl());
                jLabel_song_name.setText(st_canciones.get(current_song_id-2).getNombre());
                
                jLabel_album_img.setIcon(new db().get_disco_img(st_canciones.get(current_song_id-2).getId_disco()));
                
                current_song_id = current_song_id-1;
                jTree1.setSelectionRow(current_song_id);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
            load_clicked_song();
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    //Stop
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ply.stop_song();
    }//GEN-LAST:event_jButton1ActionPerformed

    //Next song
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        set_next_song();
    }//GEN-LAST:event_jButton3ActionPerformed

    //About
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    //Mute
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        ply.mute();
    }//GEN-LAST:event_jButton4ActionPerformed

    //Tree panel
    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        // TODO add your handling code here:
        String str1 = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
        System.out.println("\nComboBox: " + str1);
        TreePath tp = null;
        try{
            tp = jTree1.getSelectionPath().getParentPath();
        }catch(Exception ex){
            //tp equals null
        }
        if(tp != null){
            if(str1.equals(combo[0])){
                load_clicked_song();
            }if(str1.equals(combo[1])){
                if(showing_discos == false){
                    String str = jTree1.getSelectionModel().getSelectionPath().toString();
                    String s[] = str.split(",");
                    String n = s[1].substring(1, s[1].length()-1);
                    System.out.println("Clicked Group: " + n);
                    System.out.println("Albums:");

                    int[] sel = jTree1.getSelectionModel().getSelectionRows();
                    int sel_id = st_grupos.get(sel[0]-1).getId();

                    new Dao_discos(n).fill_album_names_by_group(sel_id);
                    showing_discos = true;
                }else{
                    load_clicked_album();
                }
            }if(str1.equals(combo[2])){
                if(showing_autores == false){
                    String str = jTree1.getSelectionModel().getSelectionPath().toString();
                    String s[] = str.split(",");
                    String n = s[1].substring(1, s[1].length()-1);
                    System.out.println("Clicked Autor: " + n);

                    int[] sel = jTree1.getSelectionModel().getSelectionRows();
                    int sel_id = st_autores.get(sel[0]-1).getId();

                    new Dao_canciones(n,1).fill_song_names_by_autor(sel_id);
                    showing_autores = true;
                } else{
                    load_clicked_song();
                }
            }if(str1.equals(combo[3])){
                load_clicked_album();
            }if(str1.equals(combo[4])){
                if(showing_autores == false){
                    String str = jTree1.getSelectionModel().getSelectionPath().toString();
                    String s[] = str.split(",");
                    String n = s[1].substring(1, s[1].length()-1);
                    System.out.println("Clicked genero: " + n);

                    int[] sel = jTree1.getSelectionModel().getSelectionRows();
                    String sel_gen = st_generos.get(sel[0]-1);

                    new Dao_canciones(n,1).fill_song_names_by_gendre(sel_gen);
                    showing_autores = true;
                } else{
                    load_clicked_song();
                }
            }
        }
    }//GEN-LAST:event_jTree1MouseClicked

    //Clear search 
    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        // TODO add your handling code here:
        jTextField1.setText("");
    }//GEN-LAST:event_jTextField1MouseClicked

    //Filter changed.
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        if(jComboBox1.getSelectedItem() != null){
            showing_discos = false;
            showing_autores = false;
            showing_songs = false;
            jTextField1.setText(jTFSearch);

            String s = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
            System.out.println("\nComboBox: " + s);
            clear_tree();
            if(s.equals(combo[0])){
                new Dao_canciones().fill_song_names();
            }if(s.equals(combo[1])){
                new Dao_grupos().fill_group_names();
            }if(s.equals(combo[2])){
                new Dao_autores().fill_autor_names();
            }if(s.equals(combo[3])){
                new Dao_discos().fill_album_names();
            }if(s.equals(combo[4])){
                new Dao_generos().fill_genero_names();
            }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed
    
    //Search, switchable by jComboBox.
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        String input = jTextField1.getText();
        if(!"".equals(input)){
            String s = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
            clear_tree();
            switch(s){
                case "Canciones":
                    new Dao_canciones().fill_song_names_by_name(input);

                    break;
                case "Grupos":
                    new Dao_grupos().fill_group_names_by_name(input);

                    break;
                case "Autores":
                    new Dao_autores().fill_autor_names_by_name(input);

                    break;
                case "Discos":
                    new Dao_discos().fill_album_names_by_name(input);

                    break;
                case "Generos":
                    new Dao_generos().fill_genero_names_by_genero(input);

                    break;
                default:

                    break;

            }
        }else{
            jComboBox1.setSelectedIndex(jComboBox1.getSelectedIndex());
        }
        jTextField1.setText(jTFSearch);
    }//GEN-LAST:event_jTextField1ActionPerformed

    //Load the songs of the clicked album image.
    private void jLabel_album_imgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_album_imgMouseClicked
        // TODO add your handling code here:
        load_songs_by_album();
    }//GEN-LAST:event_jLabel_album_imgMouseClicked

    //Load the songs of the clicked album name.
    private void jLabel_song_albumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_song_albumMouseClicked
        // TODO add your handling code here:
        load_songs_by_album();
    }//GEN-LAST:event_jLabel_song_albumMouseClicked

    //Lang ES
    private void jRadioButtonMenuItemESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemESActionPerformed
        // TODO add your handling code here:
        ConfigFiles cf = new ConfigFiles();
        Properties loadFile = cf.loadFile("LANG", debug);
        if(jRadioButtonMenuItemES.isSelected()){
            jRadioButtonMenuItemEN.setSelected(false);
            loadLang("ES");
            loadFile.setProperty("lang", "ES");
            cf.updateFile("LANG", loadFile, "Language configuration.");
        }else{
            jRadioButtonMenuItemEN.setSelected(true);
            loadLang("EN");
            loadFile.setProperty("lang", "EN");
            cf.updateFile("LANG", loadFile, "Language configuration.");
        }
        
    }//GEN-LAST:event_jRadioButtonMenuItemESActionPerformed

    //Lang EN
    private void jRadioButtonMenuItemENActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemENActionPerformed
        // TODO add your handling code here:
        ConfigFiles cf = new ConfigFiles();
        Properties loadFile = cf.loadFile("LANG", debug);
        if(jRadioButtonMenuItemEN.isSelected()){
            jRadioButtonMenuItemES.setSelected(false);
            loadLang("EN");
            loadFile.setProperty("lang", "EN");
            cf.updateFile("LANG", loadFile, "Language configuration.");
        }else{
            jRadioButtonMenuItemES.setSelected(true);
            loadLang("ES");
            loadFile.setProperty("lang", "ES");
            cf.updateFile("LANG", loadFile, "Language configuration.");
        }
    }//GEN-LAST:event_jRadioButtonMenuItemENActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        setColor("lightBlue");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        setColor("white");
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    
    
    //EVENTS END _______________________________________________________________
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
        
        
    }//END MAIN
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public static javax.swing.JButton jButton4;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private static javax.swing.JComboBox<String> jComboBox1;
    private static javax.swing.JLabel jLabel1;
    private static javax.swing.JLabel jLabel2;
    private static javax.swing.JLabel jLabel3;
    private static javax.swing.JLabel jLabel4;
    private static javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel6;
    public static javax.swing.JLabel jLabel_album_img;
    public static javax.swing.JLabel jLabel_next_song_name;
    public static javax.swing.JLabel jLabel_song_album;
    public static javax.swing.JLabel jLabel_song_duration;
    public static javax.swing.JLabel jLabel_song_group;
    public static javax.swing.JLabel jLabel_song_name;
    private static javax.swing.JMenu jMenu1;
    private static javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private static javax.swing.JMenuItem jMenuItem1;
    private static javax.swing.JMenuItem jMenuItem2;
    private static javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private static javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemEN;
    private static javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemES;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTextArea jTextArea_song_author;
    private static javax.swing.JTextField jTextField1;
    public static javax.swing.JToggleButton jToggleButton1;
    public static javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
